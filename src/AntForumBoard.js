import React from 'react';
import { Table, Divider, Tag } from 'antd';
import "./AntForumBoard.css"


import PropTypes from 'prop-types';
import { Route, Link, BrowserRouter as Router } from 'react-router-dom';
import Thread from './Thread.js'
import { fetchThreadTopics } from "./redux/actions/threadTopicActions.js";
import { connect } from "react-redux";

import AntThread from './AntThread.js';

/** 
The table is generated by specifying a fields object and a data object, then passing them to the Table Object.
**/
/** 
Fields we want: Title Summary Creator

TODO: Find a way to fit the data from the DB into the fields we have for the table. Create the data obj, so it can be dynamic.
**/


// Here we define all the columns to be in the table
const columns = [
  {
    title: 'Title',
    dataIndex: 'title',
    key: 'title',
    render: title => <Link to={"/forum/"+title.id} style={{ textDecoration: 'none' }}>{title.title}</Link>,
    
  },
  {
    title: 'Summary',
    dataIndex: 'summary',
    key: 'summary',
  },
  {
    title: 'Creator',
    dataIndex: 'creator',
    key: 'creator',
    render: creator => <a>{creator}</a>,

  },
  {
    title: '',
    dataIndex: 'metadata',
    key: 'metadata',
    render: metadata => (
      <>
        <div className="no-break">
        {metadata.num_comments}
        </div>
        <div className="no-break">
        {metadata.last_update}
        </div>
      </>
    ),
  },
];


class AntForumBoard extends React.Component {
  componentDidMount(){
      this.props.dispatch(fetchThreadTopics('http://localhost:8000/quizbank/api/v1/threadtopics/?format=json'));
  }
  render (){
    /** 
    generate data for the table from the queries
    **/

    if(this.props.error){
        return <div>Error! {this.props.error.message}</div>;
      }
    if(this.props.loading){
      return <div>Loading...</div>;
    }
    let data2 = []
    let topics = this.props.threadTopics
    if (topics.length > 0 ){
      for (let i = 0; i < topics.length; i++) {
        let tempObj = {}
        tempObj.key = topics[i]["id"]
        tempObj.title = {title: topics[i]["topic_text"], id: i}
        tempObj.summary = topics[i]["summary_text"]
        tempObj.creator = topics[i]["creator"]
        tempObj.metadata = {
          last_update: "num comments: " + topics[i]["last_update"],
          num_comments: "last updated: " + topics[i]["num_comments"]
        }
        data2.push(tempObj)
      }
    }

    return (
      <>
        <Table columns={columns} dataSource={data2} pagination={false} bordered title={() => 'STATIC TOPICS TABLE'}/>
      </>
    );
  }
}


const mapStateToProps = state => ({
  threadTopics: state.threadTopics.threadTopics,
  loading: state.threadTopics.loading,
  error: state.threadTopics.error
})

export default connect(mapStateToProps)(AntForumBoard);


